<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nray</title>
    <link>https://nray-scanner.org/</link>
    <description>Recent content on nray</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://nray-scanner.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>standard</title>
      <link>https://nray-scanner.org/usage/configuration-file/targetgenerator/standard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/configuration-file/targetgenerator/standard/</guid>
      <description>This is the standard target generator that is probably going to be used most of the time. It takes a list of IPs, CIDR networks or domain names as targets and black list as well as a list of TCP and UDP ports to be scanned.
enabled: true Enables or disables this target generator.
targets: [] A list of targets to scan. May be (also a mix of) CIDR networks, IPs or domain names.</description>
    </item>
    
    <item>
      <title>certificatetransparency</title>
      <link>https://nray-scanner.org/usage/configuration-file/targetgenerator/certificatetransparency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/configuration-file/targetgenerator/certificatetransparency/</guid>
      <description>The certificatetransparency streams data from certstream, a certificate transparency log stream. This allows to inspect all publicly issued certificates. Using this data, port scans may be issued against targets right after they obtain a certificate, usually during setup before any hardening or default password changes have been in place.
This may come in handy for bug bounties - nray authors BTW love to get invited for a coffee</description>
    </item>
    
    <item>
      <title>ldap</title>
      <link>https://nray-scanner.org/usage/configuration-file/targetgenerator/ldap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/configuration-file/targetgenerator/ldap/</guid>
      <description>The ldap target generator allows to connect to a ldap server in order to identify scan targets. Especially in Active Directory environments this is really useful since computer objects have a dNSHostName property and Domain Controllers usually act also as DNS servers that can be queried via LDAP.
enabled: false Enables or disables this target generator.
ldapSearchString: &amp;quot;(objectCategory=computer)&amp;quot; The ldap search to perform for selecting objects. In Active Directory environments, (objectCategory=computer) can be used to select all computer objects.</description>
    </item>
    
    <item>
      <title>Basic settings</title>
      <link>https://nray-scanner.org/usage/configuration-file/basic-settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/configuration-file/basic-settings/</guid>
      <description>Top level configuration options debug: false Enables debug output server side.
listen: [8601] The port to listen on. Multiple ports may be specified, e.g. listen: [22, 80, 443, 3389] to listen on ports 22, 80, 443 and 3389. This may make it easier for you to operate a server with nodes in different networks and firewall policies.
host: &amp;quot;127.0.0.1&amp;quot; The address to listen on. &amp;quot;0.0.0.0&amp;quot; listens on all interfaces whereas &amp;quot;127.</description>
    </item>
    
    <item>
      <title>Command line flags (node)</title>
      <link>https://nray-scanner.org/usage/flags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/flags/</guid>
      <description>Because nodes are going to deployed in a variety of scenarios in different environments, providing a configuration file is not viable. Most options are configured server side and transmitted when the node connects first, but at least the location and and connection settings (like TLS configuration) are required when a node is started.
The following options apply when nray runs as node (nray node):
--debug Enable debug output.
-h, --help Print a help message.</description>
    </item>
    
    <item>
      <title>TLS</title>
      <link>https://nray-scanner.org/usage/configuration-file/tls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/configuration-file/tls/</guid>
      <description>TLS If you are running nray in any other than your home network, make sure to enable TLS or you are going to have a bad time! If you don&amp;rsquo;t know what TLS is or don&amp;rsquo;t have a basic understanding of how these parameters play together, you should not run nray over untrusted networks!
 Nray relies on Golang, more specifically mangos, to provide support for TLS 1.2. TLS works with key material created by following the instructions of the TLS quick start guide.</description>
    </item>
    
    <item>
      <title>Prebuilt Binaries</title>
      <link>https://nray-scanner.org/installation/prebuilt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/installation/prebuilt/</guid>
      <description>Prebuilt binaries can be downloaded from the project&amp;rsquo;s Github page. Currently, binaries for the following operating systems and architectures are provided:
 Linux: x86, amd64, arm7 Windows: x86, amd64 macOS  Since nray is written in Go, you may (theoretically, untested) compile it to run on any of Go&amp;rsquo;s supported operating systems and architectures.
If you are missing a prebuilt architecture, need to inject your own custom configuration, just want a build from latest develop or have your own improvements applied, head over to the documentation on building from source.</description>
    </item>
    
    <item>
      <title>Build Your Own</title>
      <link>https://nray-scanner.org/installation/build-your-own/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/installation/build-your-own/</guid>
      <description>Want to build your own? Great, that&amp;rsquo;s the spirit! If you know git and command line basics, it isn&amp;rsquo;t too hard, promised! 
Quick and easy  First, you need git and Go installed. Once they are in place, clone the nray repository and check out the desired branch. Official releases are built from master whereas the hot new stuff is located in develop or feature branches. Open a terminal, navigate to the checked out folder and run go get -u followed by go build That&amp;rsquo;s it!</description>
    </item>
    
    <item>
      <title>Internal</title>
      <link>https://nray-scanner.org/usage/configuration-file/internal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/configuration-file/internal/</guid>
      <description>internal Everything called internal is&amp;hellip; well internal and you should only change it if you know what you are doing. This also applies to internal objects exposed by other configuration nodes.
 nodeExpiryTime: 30s Timeout to expire nodes that did not send heart beats.
nodeExpiryCheckInterval: 10s How often to check for expired nodes.</description>
    </item>
    
    <item>
      <title>Pooling</title>
      <link>https://nray-scanner.org/usage/pooling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/pooling/</guid>
      <description>The core concept around nray&amp;rsquo;s work distribution functionality is pooling.
Nray internally has a list of pools, how many can be specified via the pools: n directive in the configuration file. The idea is that each pool performs a scan of all targets, which means that each pool creates a complete view. Each pool may contain an arbitrary number of scanner nodes that work together on performing the scan.
This means that speeding up a scan by bringing more workers in is achieved by placing them all in the same pool whereas creation of network views is done by creating a pool for each desired view.</description>
    </item>
    
    <item>
      <title>TLS setup</title>
      <link>https://nray-scanner.org/usage/tls-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/tls-setup/</guid>
      <description>It is recommended to use TLS for protecting traffic between nray&amp;rsquo;s server and nodes, including mutual authentication if required. This quick start guide describes a portable and working approach to generate a CA and all required keys and certificates as well as how to use them. The goal is to provide an easy to follow guide, nevertheless a basic understanding of TLS and PKI is recommended.
This guide relies on cloudflare&amp;rsquo;s open source cfssl.</description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>https://nray-scanner.org/usage/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/examples/</guid>
      <description>This page contains some examples to get your nray experience started quickly.
All examples assume that the binary is called nray, of course you have to adapt this to the name of your binary.
Simple port scan from local machine Unfortunately, due to a bug in the upstream project of the configuration parser, currently some options mustn&amp;rsquo;t be omitted. See this issue for more information. The following configuration has therefore all options listed, albeit most of them are disabled.</description>
    </item>
    
    <item>
      <title>tcp</title>
      <link>https://nray-scanner.org/usage/configuration-file/scannerconfig/tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/configuration-file/scannerconfig/tcp/</guid>
      <description>timeout: 2500ms Timeout for TCP connections. If no response is received within this time frame, a port is marked closed.</description>
    </item>
    
    <item>
      <title>udp</title>
      <link>https://nray-scanner.org/usage/configuration-file/scannerconfig/udp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/configuration-file/scannerconfig/udp/</guid>
      <description>fast: false Fast sends only known payloads to known ports. The list and payloads are taken from the Metasploit project and it contains currently UDP ports 1604, 53, 137, 123, 524, 5093, 1434, 161, and 111.
defaultHexPayload: &amp;quot;\x6e\x72\x61\x79&amp;quot; Since UDP is connection-less, a payload needs to be sent. This option configures the default payload that is sent if no custom payload is specified for a port. ASCII is supported as well as hexadecimal and octal data representation.</description>
    </item>
    
    <item>
      <title>ssh</title>
      <link>https://nray-scanner.org/usage/configuration-file/scannerconfig/zgrab2/ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/configuration-file/scannerconfig/zgrab2/ssh/</guid>
      <description>ZGrab2 integration is experimental and porting is currently not complete. You can help adding modules and improve stability.
 subscribePorts: [&amp;quot;tcp/22&amp;quot;] Ports to subscribe. If one of these is found open, this scanner module is triggered against that target.
timeout: 2500ms Timeout before the scan is cancelled.
ClientID: &amp;quot;SSH-2.0-Go-nray&amp;quot; SSH client ID to present to the server.
CollectUserAuth: true If set to true, possible client authentication options are queried.</description>
    </item>
    
    <item>
      <title>http</title>
      <link>https://nray-scanner.org/usage/configuration-file/scannerconfig/zgrab2/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/configuration-file/scannerconfig/zgrab2/http/</guid>
      <description>ZGrab2 integration is experimental and porting is currently not complete. You can help adding modules and improve stability.
 The naming of this module&amp;rsquo;s subscription parameters differ from other ZGrab2 modules due to the need to differentiate between HTTP and HTTPS.
 subscribeHTTPPorts: [&amp;quot;tcp/80&amp;quot;, &amp;quot;tcp/8080&amp;quot;, &amp;quot;tcp/8000&amp;quot;] Ports to subscribe for HTTP scanning. If one of these is found open, the HTTP scanner module is triggered against that target.
subscribeHTTPSPorts: [&amp;quot;tcp/443&amp;quot;, &amp;quot;tcp/8443&amp;quot;] Ports to subscribe for HTTPS scanning.</description>
    </item>
    
    <item>
      <title>terminal</title>
      <link>https://nray-scanner.org/usage/configuration-file/events/terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/configuration-file/events/terminal/</guid>
      <description>enabled: true Enables printing of events to stdout.
internal.channelsize: 1000 Size of the internal channel holding events.</description>
    </item>
    
    <item>
      <title>json-file</title>
      <link>https://nray-scanner.org/usage/configuration-file/events/json-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/configuration-file/events/json-file/</guid>
      <description>enabled: true Enables logging of events to a file.
filename: &amp;quot;nray-output.json&amp;quot; The filename to log to.
overwriteExisting: false If set to false, this option prevents from (accidentally) overwriting existing output files.
internal.channelsize: 10000 Size of the internal buffer holding events between force flushing to file system.
internal.synctimer: 10s Interval to flush data to the file system.</description>
    </item>
    
    <item>
      <title>elasticsearch</title>
      <link>https://nray-scanner.org/usage/configuration-file/events/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nray-scanner.org/usage/configuration-file/events/elasticsearch/</guid>
      <description>enabled: false Enables the elasticsearch event handler. If true, all events are also sent to elasticsearch. This is useful for performing queries or visualizing data, e.g. using Kibana.
server: &amp;quot;elasticsearch.local&amp;quot; The name or IP address of the elasticsearch node.
useTLS: true Forces use of TLS.
port: 443 TCP port elasticsearch is listening on.
internal.indexname: &amp;quot;nray&amp;quot; The name of the index.
internal.channelsize: 10000 Size of the internal buffer holding events between commits.</description>
    </item>
    
  </channel>
</rss>